# this pvc will be used to store downloaded init.sql file
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: init-script
  namespace: donor
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 50Mi
---
# this pvc will be used to store mysql database
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-data-pvc
  namespace: donor
spec:
  accessModes:
    - ReadWriteOnce
    # A volume with volumeMode: Filesystem is mounted into Pods into a directory. If the volume is backed by a block device and the device is empty, Kubernetes creates a filesystem on the device before mounting it for the first time.
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: donor-mysql-deployment
  namespace: donor
  # you can give any k8s component a label
  # are key/value apirs that are attached to k8s resoruces
  # identifier, which should be meaningful and relevant to users
  # but i possible share the same label. For PODS is required
  labels:
    app: donor-mysql
spec: # deploy specific specification
  replicas: 1 # how many pods want to create. 1 'cause is a Db
  selector: # identify a set of resources
    matchLabels: # match all pods match with labels ...
      # use app when you want to develop your application [best practice]
      app: donor-mysql
  template: # Blueprint for Pods defined by template. Is a configuration for pod
    metadata:
      labels:
        app: donor-mysql
    spec:
      containers:  # list of containers used to create by pod
      - image: mysql:5.7
        name: donor-db
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: root
          # valueFrom:
          #   secretKeyRef:
          #     name: db-secrets
          #     key: mysql-root-pwd
        - name: MYSQL_DATABASE
          value: donor_db
        - name: MYSQL_USER
          value: admin
          # valueFrom:
          #   secretKeyRef:
          #     name: db-secrets
          #     key: mysql-user
        - name: MYSQL_PASSWORD
          value: admin
          # valueFrom:
          #   secretKeyRef:
          #     name: db-secrets
          #     key: mysql-password
        volumeMounts:
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d # we are mounting init-script volume in this directory. so init.sql file will be available here.
      volumes:
      - name: init-script # this volume holds downloaded init.sql file.
        configMap:
          name: donor-mysql-config
---
apiVersion: v1
kind: Service
metadata:
  name: donor-db-service # nome relativo a quello di configuraizone
  namespace: donor
spec:
  selector:
    app: donor-mysql  # select pods to forward the request to ...
  ports:
    - protocol: TCP
      port: 3360 # service port
      targetPort: 3360 # containerPort of deployment